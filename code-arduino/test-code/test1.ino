/*
* Basic Image Display for We Act E-Paper Display
*/

#include <GxEPD2_BW.h>
#include <Fonts/FreeMonoBold9pt7b.h>

// Include the display configuration
#include "DisplayConfig.h"

// Sample image - 32x32 black and white icon (smiley face)
const unsigned char smileyIcon[] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xFE, 0x00, 0x01, 0xFF, 0xFF, 0x80, 0x03, 0xFF, 0xFF, 0xC0,
  0x07, 0xFF, 0xFF, 0xE0, 0x0F, 0xFF, 0xFF, 0xF0, 0x1F, 0xFF, 0xFF, 0xF8, 0x1F, 0xFF, 0xFF, 0xF8,
  0x3F, 0xFF, 0xFF, 0xFC, 0x3F, 0xC0, 0x03, 0xFC, 0x7F, 0x00, 0x00, 0xFE, 0x7E, 0x00, 0x00, 0x7E,
  0x7C, 0x0F, 0xF0, 0x3E, 0xFC, 0x1F, 0xF8, 0x3F, 0xF8, 0x1F, 0xF8, 0x1F, 0xF8, 0x1F, 0xF8, 0x1F,
  0xF8, 0x1F, 0xF8, 0x1F, 0xF8, 0x1F, 0xF8, 0x1F, 0xFC, 0x1F, 0xF8, 0x3F, 0x7C, 0x0F, 0xF0, 0x3E,
  0x7E, 0x00, 0x00, 0x7E, 0x7F, 0x00, 0x00, 0xFE, 0x3F, 0xC0, 0x03, 0xFC, 0x3F, 0xFF, 0xFF, 0xFC,
  0x1F, 0xFF, 0xFF, 0xF8, 0x1F, 0xFF, 0xFF, 0xF8, 0x0F, 0xFF, 0xFF, 0xF0, 0x07, 0xFF, 0xFF, 0xE0,
  0x03, 0xFF, 0xFF, 0xC0, 0x01, 0xFF, 0xFF, 0x80, 0x00, 0x7F, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00
};

// Another sample image - 64x64 black and white icon (tree)
const unsigned char treeIcon[] PROGMEM = {
  0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xC0, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x07, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xF0, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x1F, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xFC, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x7F, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x01, 0xFF, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x03, 0xFF, 0xFF, 0xC0, 0x00, 0x00, 0x00,
  0x00, 0x07, 0xFF, 0xFF, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xFF, 0xFF, 0xF0, 0x00, 0x00, 0x00,
  0x00, 0x1F, 0xFF, 0xFF, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xFF, 0xFF, 0xFC, 0x00, 0x00, 0x00,
  0x00, 0x7F, 0xFF, 0xFF, 0xFE, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00,
  0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00
};

// Function to display images on the e-paper display
void displayImage(const unsigned char* image, int width, int height, int x, int y) {
  display.drawBitmap(x, y, image, width, height, GxEPD_BLACK);
}

void setup() {
  Serial.begin(115200);
  delay(100);
  
  // Initialize the display
  display.init(115200, true, 50, false);
  display.setRotation(1); // Set the rotation as needed (0, 1, 2, or 3)
  
  // Clear the display
  display.setFullWindow();
  display.firstPage();
  do {
    display.fillScreen(GxEPD_WHITE);
    
    // Add a title above the image
    display.setFont(&FreeMonoBold9pt7b);
    display.setTextColor(GxEPD_BLACK);
    display.setCursor(10, 20);
    display.print("We Act Display Demo");
    
    // Display the smiley icon
    displayImage(smileyIcon, 32, 32, 20, 40);
    
    // Display the tree icon
    displayImage(treeIcon, 64, 64, display.width() - 84, 40);
    
    // Add some text below the images
    display.setCursor(10, 120);
    display.print("E-paper Image Display");
    
  } while (display.nextPage());
  
  Serial.println("Display updated successfully");
}

void loop() {
  // Nothing to do in the loop for this example
  delay(1000);
}

// If you want to display an image from a file stored on an SD card:
/* 
void displayImageFromSD(const char* filename, int x, int y) {
  // This requires additional libraries like SD.h or SdFat.h
  if (SD.begin(SD_CS_PIN)) {
    File imageFile = SD.open(filename);
    if (imageFile) {
      // Read header info (width, height, etc.) from file
      
      // Read image data
      uint8_t buffer[32]; // Or suitable size
      int bytesRead;
      while ((bytesRead = imageFile.read(buffer, sizeof(buffer))) > 0) {
        // Process buffer and display on e-paper
        // This depends on your image format
      }
      
      imageFile.close();
    }
  }
}
*/